name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code (replace with your specific linting command)
        run: |
          # Example: Use ESLint for JavaScript/TypeScript
          npm install -g eslint
          eslint .

      - name: Run unit tests (replace with your specific testing command)
        run: |
          # Example: Use Jest for unit testing
          npm test

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up QEMU (optional, if needed for multi-arch builds)
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx (optional, if needed for multi-arch builds)
        uses: docker/setup-buildx-action@v2

      - name: Install Docker (existing commands)
        # ... (unchanged)

      - name: Install AWS CLI (using pre-built action)
        uses: aws-actions/install-aws-cli@v2

      - name: Verify AWS CLI installation (optional)
        run: aws --version  # (optional)

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ECR_LOGIN_URI }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          docker buildx build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --push .

  continuous-deployment:
    name: Continuous Deployment
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials (unchanged)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR (unchanged)
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_LOGIN_URI }}

      - name: Pull latest images
        run: |
          docker pull <span class="math-inline">\{\{ secrets\.AWS\_ECR\_LOGIN\_URI \}\}/</span>{{ secrets.ECR_REPOSITORY_NAME }}:latest

      - name: Stop and remove telecom customer churn container if running
        # ... (consider adding error handling for cases where container doesn't exist)

      - name: Run Docker Image to serve users
        run: |
          docker run -d -p 80:8080 --name=pipeline-app \
            -e 'MONGO_DB_URL=<span class="math-inline">\{\{ secrets\.MONGODB\_KEY \}\}' \\
\-<0\>e 'AWS\_ACCESS\_KEY\_ID\=</span>{{ secrets.AWS_ACCESS_KEY_ID }}' \
            -e 'AWS_SECRET_ACCESS_KEY=<span class="math-inline">\{\{ secrets\.AWS\_SECRET\_ACCESS\_KEY \}\}' \\
\-e 'AWS\_REGION\=</span>{{ secrets.AWS_REGION }}' \
            <span class="math-inline">\{\{ secrets\.AWS\_ECR\_LOGIN\_URI \}\}/</span>{{ secrets.ECR_REPOSITORY_NAME }}
